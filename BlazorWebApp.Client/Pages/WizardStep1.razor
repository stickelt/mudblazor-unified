@using BlazorWebApp.Shared
@using MudBlazor
@using BlazorWebApp.Client.Services
@using System.Text.Json
@inject WizardStateService StateService
@inject IJSRuntime JSRuntime

<MudTextField Label="First Name"
              Value="FormData.FirstName"
              ValueChanged="@(async (string val) => await OnFirstNameChanged(val))"
              Required="true"
              Variant="Variant.Outlined"
              FullWidth="true"
              Immediate="true"
              Placeholder="Enter your first name" />

@if (ShowDebugInfo)
{
    <MudDivider Class="my-4" />
    <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
        <MudText Typo="Typo.subtitle1" Color="Color.Primary">Debug Information (Step 1)</MudText>
        <MudText Typo="Typo.body2"><strong>Current Step:</strong> @StateService.CurrentStep</MudText>
        <MudText Typo="Typo.body2"><strong>First Name:</strong> @FormData.FirstName</MudText>
        <MudText Typo="Typo.body2"><strong>Last Name:</strong> @FormData.LastName</MudText>
        <MudText Typo="Typo.body2"><strong>Form Data JSON:</strong></MudText>
        <MudText Typo="Typo.caption" Style="word-break: break-all; font-family: monospace;">
            @JsonSerializer.Serialize(FormData, new JsonSerializerOptions { WriteIndented = true })
        </MudText>
    </MudPaper>
}

@code {
    [Parameter] public required WizardFormData FormData { get; set; }

    // Set to true to show debug information
    private bool ShowDebugInfo = true;

    protected override async Task OnInitializedAsync()
    {
        await LogToConsole("WizardStep1 initialized");
        await LogToConsole($"FormData: {JsonSerializer.Serialize(FormData)}");
    }

    protected override async Task OnParametersSetAsync()
    {
        await LogToConsole("WizardStep1 parameters set");
        await LogToConsole($"FormData: {JsonSerializer.Serialize(FormData)}");
    }

    private async Task OnFirstNameChanged(string value)
    {
        FormData.FirstName = value;
        await StateService.UpdateFormDataAsync(FormData);
        await LogToConsole($"First name changed to: {value}");
        await LogToConsole($"Updated FormData: {JsonSerializer.Serialize(FormData)}");
    }

    private async Task LogToConsole(string message)
    {
        if (ShowDebugInfo)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"[WizardStep1] {message}");
        }
    }
}
