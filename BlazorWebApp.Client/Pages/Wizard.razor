@page "/wizard"
@rendermode InteractiveAuto
@using BlazorWebApp.Shared
@using MudBlazor
@using BlazorWebApp.Client.Pages
@using BlazorWebApp.Client.Services
@using System.Text.Json
@inject IWizardFormService WizardService
@inject WizardStateService StateService
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudCard Elevation="3" Class="rounded-lg">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Multi-Step Form</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudStepper @bind-Value="StateService.CurrentStep" Linear="true" Color="Color.Primary">
                <MudStep Title="Personal Info" Icon="@Icons.Material.Filled.Person">
                    <MudText Typo="Typo.h6" Class="mb-4">First Name</MudText>
                    <BlazorWebApp.Client.Pages.WizardStep1 FormData="StateService.FormData" />
                    <div class="d-flex justify-end mt-4">
                        <MudButton T="string" Variant="Variant.Filled" Color="Color.Primary" OnClick="@NextStep">Next</MudButton>
                    </div>
                </MudStep>
                <MudStep Title="Additional Info" Icon="@Icons.Material.Filled.Info">
                    <MudText Typo="Typo.h6" Class="mb-4">Last Name</MudText>
                    <BlazorWebApp.Client.Pages.WizardStep2 FormData="StateService.FormData" />
                    <div class="d-flex justify-space-between mt-4">
                        <MudButton T="string" Variant="Variant.Outlined" OnClick="@PrevStep">Back</MudButton>
                        <MudButton T="string" Variant="Variant.Filled" Color="Color.Primary" OnClick="@NextStep">Next</MudButton>
                    </div>
                </MudStep>
                <MudStep Title="Review & Submit" Icon="@Icons.Material.Filled.CheckCircle">
                    <MudText Typo="Typo.h6" Class="mb-4">Review Your Information</MudText>
                    <BlazorWebApp.Client.Pages.WizardReview FormData="StateService.FormData" />
                    <div class="d-flex justify-space-between mt-4">
                        <MudButton T="string" Variant="Variant.Outlined" OnClick="@PrevStep">Back</MudButton>
                        <MudButton T="string" Variant="Variant.Filled" Color="Color.Success" OnClick="@OnSubmit">Submit</MudButton>
                    </div>
                    @if (_submitted)
                    {
                        <MudAlert Severity="Severity.Success" Class="mt-4">Form submitted successfully!</MudAlert>
                    }
                </MudStep>
            </MudStepper>
        </MudCardContent>
    </MudCard>
</MudContainer>

@if (ShowDebugInfo)
{
    <MudDivider Class="my-4" />
    <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
        <MudText Typo="Typo.subtitle1" Color="Color.Primary">Debug Information (Main Wizard)</MudText>
        <MudText Typo="Typo.body2"><strong>Current Step:</strong> @StateService.CurrentStep</MudText>
        <MudText Typo="Typo.body2"><strong>Submitted:</strong> @_submitted</MudText>
        <MudText Typo="Typo.body2"><strong>Form Data:</strong></MudText>
        <MudText Typo="Typo.caption" Style="word-break: break-all; font-family: monospace;">
            @JsonSerializer.Serialize(StateService.FormData, new JsonSerializerOptions { WriteIndented = true })
        </MudText>
        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="ToggleDebugMode" Class="mt-2 mr-2">
            @(ShowDebugInfo ? "Hide Debug Info" : "Show Debug Info")
        </MudButton>
        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="ClearLocalStorage" Class="mt-2 mr-2">
            Clear LocalStorage
        </MudButton>
        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="ShowLocalStorageData" Class="mt-2">
            Show LocalStorage Data
        </MudButton>
    </MudPaper>
}

@code {
    private bool _submitted = false;
    private bool ShowDebugInfo = true;

    protected override async Task OnInitializedAsync()
    {
        await StateService.InitializeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LogToConsole("Wizard initialized");
            await LogToConsole($"State initialized. Current step: {StateService.CurrentStep}");
            await LogToConsole($"FormData: {JsonSerializer.Serialize(StateService.FormData)}");
        }
    }

    private async Task NextStep()
    {
        await LogToConsole($"NextStep called. Current step: {StateService.CurrentStep}");
        if (StateService.CurrentStep < 2)
        {
            await StateService.NextStepAsync();
            await LogToConsole($"Step advanced to: {StateService.CurrentStep}");
        }
    }

    private async Task PrevStep()
    {
        await LogToConsole($"PrevStep called. Current step: {StateService.CurrentStep}");
        if (StateService.CurrentStep > 0)
        {
            await StateService.PreviousStepAsync();
            await LogToConsole($"Step decreased to: {StateService.CurrentStep}");
        }
    }

    private async Task OnSubmit()
    {
        await LogToConsole("OnSubmit called");
        await LogToConsole($"Submitting form data: {JsonSerializer.Serialize(StateService.FormData)}");
        await WizardService.SubmitFormAsync(StateService.FormData);
        _submitted = true;
        await LogToConsole("Form submitted successfully");

        // Clear the state after successful submission
        await StateService.ClearStateAsync();
        await LogToConsole("State cleared");
    }

    private async Task ToggleDebugMode()
    {
        ShowDebugInfo = !ShowDebugInfo;
        await LogToConsole($"Debug mode toggled to: {ShowDebugInfo}");
    }

    private async Task ClearLocalStorage()
    {
        await LogToConsole("Clearing localStorage");
        await StateService.ClearStateAsync();
        await LogToConsole("localStorage cleared");
    }

    private async Task ShowLocalStorageData()
    {
        await LogToConsole("Showing localStorage data");
        await JSRuntime.InvokeVoidAsync("console.log", "localStorage wizardData:",
            await JSRuntime.InvokeAsync<string>("eval", "JSON.stringify(JSON.parse(localStorage.getItem('wizardData')), null, 2)"));
        await JSRuntime.InvokeVoidAsync("console.log", "localStorage wizardStep:",
            await JSRuntime.InvokeAsync<string>("eval", "localStorage.getItem('wizardStep')"));
    }

    private async Task LogToConsole(string message)
    {
        if (ShowDebugInfo && !string.IsNullOrEmpty(message))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"[Wizard] {message}");
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("prerendering"))
            {
                // Ignore JavaScript interop errors during prerendering
                // We'll log to console after the component is rendered
            }
        }
    }
}
